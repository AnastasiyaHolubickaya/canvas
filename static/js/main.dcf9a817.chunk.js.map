{"version":3,"sources":["redux/canvasReducer.tsx","redux/selectors.ts","components/Canvas.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["initialState","canvasState","canvasSize","context","actions","stateCanvas","type","size","canvasReducer","state","action","getContextReselect","createSelector","canvas","Styledcanvas","styled","lineSegmentsIntersect","currentCrdnt","prevCrdnt","x1","y1","x2","y2","x3","y3","a_dx","a_dy","b_dx","b_dy","s","t","Canvas","width","height","dispatch","useDispatch","useSelector","ref","useRef","currentCoordin","lines","massIntersect","j","getContext","useCallback","current","useEffect","animate","ctx","clearRect","i","length","ww","colaps_time_step","setTimeout","beginPath","moveTo","lineTo","stroke","handleRightClick","event","preventDefault","secondX","pageX","secondY","pageY","push","mass","m","massXY","xC","yC","concat","find","strokeStyle","cntx","masslines","c","arc","Math","PI","fillStyle","fill","drawDot","handleButtonClick","onContextMenu","onClick","firstX","firstY","handleonClick","onMouseMove","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dcf9a817.chunk.js","sourcesContent":["import { BaseThuncType, InferActionType} from \"./store\";\r\n\r\n\r\nlet initialState = {\r\n    canvasState: false,\r\n    canvasSize:[0,0],\r\n    context: null as CanvasRenderingContext2D|null\r\n};\r\nexport type initialStateType  = typeof initialState;\r\n\r\ntype ActionsType= InferActionType<typeof  actions>;\r\ntype thuncType = BaseThuncType<ActionsType>\r\n\r\nconst canvasReducer =  (state = initialState, action:ActionsType):initialStateType => {\r\n    switch (action.type) {\r\n        case  \"SET_CANVAS_STATE\":\r\n            return {\r\n                ...state,\r\n                canvasState: action.stateCanvas\r\n            };\r\n        case  \"SET_CANVAS_SIZE\":\r\n            return {\r\n                ...state,\r\n                canvasSize: action.size\r\n            };\r\n        case  \"SET_CONTEXT\":\r\n            return {\r\n                ...state,\r\n                context: action.context\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions={\r\n    setCanvasState:(stateCanvas:boolean)=> ({type: \"SET_CANVAS_STATE\",stateCanvas }as const),\r\n    setCanvasSize:(size:Array<number>)=>({type: 'SET_CANVAS_SIZE', size}as const),\r\n    setContext: (context:CanvasRenderingContext2D|null)=> ({type:'SET_CONTEXT', context} as const)\r\n};\r\n//thunk\r\nexport  const  InitializationThunkCreator = ():thuncType=> async (dispatch) => {\r\n\r\n};\r\n\r\nexport default canvasReducer;","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./store\";\r\n\r\n const getContext = (state:AppStateType) => {\r\n    return state.canvas.context\r\n};\r\nconst getSizeCanvas = (state:AppStateType) => {\r\n    return state.canvas.canvasSize\r\n};\r\n\r\n\r\nexport const getContextReselect = createSelector(getContext,(context) =>{//\r\n    return context;\r\n});\r\nexport const getCanvasSizeReselect = createSelector(getSizeCanvas,(canvasSize) =>{//\r\n    return canvasSize;\r\n});","import React, {useCallback, useEffect, useRef} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {actions} from \"../redux/canvasReducer\";\r\nimport {getContextReselect} from \"../redux/selectors\";\r\nimport {CanvasPropsType} from \"../redux/types/types\";\r\n\r\n\r\nconst Styledcanvas = styled.canvas`\r\n   margin: 0 auto;\r\n   border: 2px solid red;\r\n`;\r\n\r\n\r\n//находим точку пересечения линий\r\nconst lineSegmentsIntersect =(currentCrdnt:Array<number>, prevCrdnt:Array<number>) =>{\r\n    let [x1, y1, x2, y2] = currentCrdnt;\r\n    let [x3, y3, x4, y4] = prevCrdnt;\r\n    let a_dx = x2 - x1;\r\n    let a_dy = y2 - y1;\r\n    let b_dx = x4 - x3;\r\n    let b_dy = y4 - y3;\r\n    let s = (-a_dy * (x1 - x3) + a_dx * (y1 - y3)) / (-b_dx * a_dy + a_dx * b_dy);\r\n    let t = (+b_dx * (y1 - y3) - b_dy * (x1 - x3)) / (-b_dx * a_dy + a_dx * b_dy);\r\n    return (s >= 0 && s <= 1 && t >= 0 && t <= 1) ? [x1 + t * a_dx, y1 + t * a_dy] : false;\r\n};\r\n//находим центр линии\r\n\r\n\r\nexport const Canvas:React.FC<CanvasPropsType> = ({width, height}) =>{\r\n\r\n    const dispatch = useDispatch();\r\n    const context = useSelector(getContextReselect);\r\n    const ref:any = useRef(null);\r\n\r\n    let currentCoordin:Array<number> = [];// массив координат текущей линии\r\n    let lines:Array<Array<number> >=[];// массив  координат всех нарисованных линий\r\n    let massIntersect:any = [];// массив точек пересечения линий\r\n    let t:any=[];\r\n    let j=0;\r\n    let colaps_time_step = 101;\r\n\r\n    const getContext = useCallback( () =>{\r\n        const canvas:HTMLCanvasElement = ref.current;\r\n        dispatch(actions.setCanvasState(true));\r\n        dispatch(actions.setCanvasSize([width,height]));\r\n        let context  = canvas.getContext('2d');\r\n        dispatch(actions.setContext(context));\r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n       getContext();\r\n    },[getContext]);// пустая зависимость означает сделать что-то когда компонента вмонтировалась ( componentDidMount())\r\n\r\n    const find = (massXY:Array<number>) =>{\r\n        let mass =[];\r\n        let xC = (massXY[2]-massXY[0])/2/colaps_time_step;\r\n        mass.push(xC);\r\n        let yC = (massXY[3]-massXY[1])/2/colaps_time_step;\r\n        mass.push(yC);\r\n        return massXY.concat(mass);\r\n    };\r\n    //рисуем красную точку на пересечении\r\n    const drawDot =(cntx:CanvasRenderingContext2D|null,mass:Array<number>,masslines:Array<Array<number>>) =>{\r\n        for ( let i=0; i<masslines.length; i++) {\r\n            let  c = lineSegmentsIntersect(mass, masslines[i]);\r\n            if (!!c && cntx !== null) {\r\n                 massIntersect.push(c);\r\n                 cntx.moveTo(c[0], c[1]);\r\n                 cntx.arc(c[0], c[1], 3, 0, Math.PI * 2, true);//arc(90,65,5,0,Math.PI*2,true)\r\n                 cntx.fillStyle = 'red';\r\n                 cntx.fill();\r\n            }\r\n        }\r\n        currentCoordin=[];\r\n    };\r\n    //рисуем линии\r\n    const drawLine = (ctx:CanvasRenderingContext2D|null, mass:Array<number>) =>{\r\n    if(ctx!==null) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(mass[0], mass[1]);\r\n        ctx.lineTo(mass[2], mass[3]);\r\n        ctx.strokeStyle = 'black';\r\n        ctx.stroke();\r\n    }\r\n};\r\n    const clearMemory=()=>{\r\n        currentCoordin=[];\r\n        lines=[];\r\n        massIntersect=[];\r\n\r\n    };\r\n    const animate =(ctx:CanvasRenderingContext2D|null) => {\r\n        if(ctx!==null)\r\n            ctx.clearRect(0,0, width,height);\r\n            for (let i = 0; i <= t.length - 1; i++) {\r\n                ww(ctx, t[i]);\r\n            }\r\n            if (j < colaps_time_step - 1) {\r\n                setTimeout(animate, 30,ctx);\r\n                j++;\r\n            }else {\r\n                j=0;\r\n                t=[];\r\n            }\r\n\r\n    };\r\n    const ww =(ctx:any, t:any) =>{\r\n       // ctx.clearRect(0,0, width,height);\r\n        ctx.beginPath();\r\n        ctx.moveTo(t[0]+t[4], t[1]+t[5]);\r\n        ctx.lineTo(t[2]-t[4], t[3]-t[5]);\r\n        ctx.stroke();\r\n        t[0]+=t[4];\r\n        t[2]-=t[4];\r\n        t[1]+=t[5];\r\n        t[3]-=t[5];\r\n    };\r\n\r\n\r\n    const handleMouseMove = (event: React.MouseEvent<HTMLCanvasElement>) =>{\r\n        /*if(draw){\r\n           x = event.pageX;\r\n           y = event.pageY;\r\n           let c=getContext();\r\n           if(c !== null){\r\n               c.lineTo(x , y);\r\n               c.stroke();\r\n           }\r\n       }\r\n\r\n  /*\r\n       event.preventDefault();\r\n\r\n        if(ctx !== null){\r\n           * ctx.clearRect(0,0,600,500);\r\n\r\n             }\r\n            /*let str = 'X : ' + x + ', ' + 'Y : ' + y;\r\n            if(ctx !== null){\r\n                ctx.fillRect(0, 0, width, height);\r\n                ctx.fillStyle = '#ddd';\r\n                ctx.fillRect(x + 10, y + 10, 80, 25);\r\n                ctx.fillStyle = '#ffffff';\r\n                ctx.font = 'bold 20px verdana';\r\n                ctx.fillText(str, x + 20, y + 30, 60);\r\n\r\n            }*/\r\n\r\n    };\r\n    const handleonClick = (event:React.MouseEvent<HTMLCanvasElement>) => {\r\n                let firstX = event.pageX;\r\n                let firstY = event.pageY;\r\n                currentCoordin.push(firstX, firstY);\r\n    };\r\n    const handleRightClick = (event:React.MouseEvent<HTMLCanvasElement>) => {\r\n        event.preventDefault();\r\n        getContext();\r\n            let secondX = event.pageX;\r\n            let secondY = event.pageY;\r\n            currentCoordin.push(secondX, secondY);\r\n        //console.log( currentCoordin);\r\n            lines.push([currentCoordin[0], currentCoordin[1], currentCoordin[2], currentCoordin[3]]);\r\n             let m = find(currentCoordin);\r\n             t.push(m);\r\n        //console.log(currentCoordin);\r\n            drawLine(context,currentCoordin);\r\n            drawDot(context,currentCoordin,lines);\r\n            //setDraw(false);\r\n\r\n        //console.log(currentCoordin);\r\n    };\r\n    const handleButtonClick =(event:React.MouseEvent) =>{\r\n        clearMemory();\r\n        getContext();\r\n        animate(context);\r\n    };\r\n    return <>\r\n    <Styledcanvas onContextMenu={event => handleRightClick(event)}  onClick={event => handleonClick(event)} onMouseMove={event => handleMouseMove(event)} ref={ref} />\r\n    <button onClick={event => handleButtonClick(event)}> tttt</button>\r\n\r\n    </>\r\n\r\n};\r\n","import React from 'react';\nimport {Canvas} from \"./components/Canvas\";\nimport './App.css';\n\nfunction App() {\n\n  return (\n\n        <Canvas width={300} height={300}/>\n\n  )\n}\n\nexport default App;\n//","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport canvasReducer from \"./canvasReducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\n\r\n//импортируем редаксовский редьюсер\r\n// redux  - библиотека,  состоит из store  у которого есть  state и  reducers\r\n\r\nlet reducers = combineReducers(\r\n    {\r\n        canvas: canvasReducer\r\n    }\r\n);\r\ntype RootReduserType = typeof reducers;//типизируем reducers\r\nexport type AppStateType = ReturnType<RootReduserType>;//динамически достаем из функции то, что она возвращает - глобальный state\r\n\r\n//определяем типы actionCreater-ов с помощью TypeScript\r\ntype PropertyTypes<T> = T extends {[key: string]: infer U} ?U : never\r\nexport  type InferActionType<T extends {[key: string]:(...args:any[])=>any}> = ReturnType<PropertyTypes<T>>\r\n//тип санок\r\nexport type BaseThuncType<AT extends Action, TH=Promise<void> >= ThunkAction<TH,AppStateType, unknown, AT>\r\n\r\n//комментарий ниже (@ts-ignore)говорит typescript у игнорировать строку под комментарием\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__|| compose;//для подключения к проекту расширения REDUX для google chrom\r\nconst store = createStore(reducers, composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\nexport default store;\r\n// у store есть 3 основных метода -\r\n// store.getState(), получить актуальные данные из state\r\n// store.Subckriber(subskriber), подписаться на изменения\r\n// store.dispatch(action) преобразовать state","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from \"react-router-dom\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport  {Provider} from \"react-redux\";\nimport store from './redux/store';\n\nReactDOM.render(\n\n  <Provider store={store}>\n    <App />\n  </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}